#!/bin/bash

if [ $# -lt 4 ]; then
    echo -e "this util is used to generate sdk of a resource\n"
    echo "usage: $0"
    echo "    dest_cloud_alias"
    echo "    sdk_dir"
    echo "    resource name"
    echo "    api_doc_dir"
    echo "    [create_success_codes:update_success_codes:delete_success_codes:get_success_codes]"
    echo "    update_req_method[Post | Put], default is Put"
    echo "    how to do with the old go file[rm | new], default is new"
    exit 1
fi

tool_dir=$(dirname $(which $0))
. $tool_dir/common.sh

get_config="$(dirname $(which $0))/$config_exec"

dest_cloud_alias=$1
_=$($get_config name $dest_cloud_alias)
test $? -ne 0 && echo "can not find cloud name: $dest_cloud_alias" && exit 1

code_dir="$($get_config cloud_golangsdk_dir $dest_cloud_alias)/openstack/$2"
mkdir -p $code_dir
test $? -ne 0 && echo "make dir failed for: $code_dir" && exit 1

sdk_name="golangsdk"

resource_name=$(capitalize $3)
api_doc_dir=$4

create_success_codes=""
update_success_codes=""
delete_success_codes=""
get_success_codes=""
if [ $# -gt 4 ]; then
    create_success_codes=$(echo $5 | awk -F ':' '{print $1}')
    update_success_codes=$(echo $5 | awk -F ':' '{print $2}')
    delete_success_codes=$(echo $5 | awk -F ':' '{print $3}')
    get_success_codes=$(echo $5 | awk -F ':' '{print $4}')
fi

if [ $# -le 5 ]; then
    update_req_method="Put"
else
    if [ "$6" != "Put" ] && [ "$6" != "Post" ]; then
    echo "unknown update_req_method: $6"
    exit 1
    fi
    update_req_method=$6
fi

if [ $# -le 6 ]; then
    treat_old_file="new"
else
    if [ "$7" != "new" ] && [ "$7" != "rm" ]; then
    echo "unknown treat_old_file: $7"
    exit 1
    fi
    treat_old_file=$7
fi

#echo  $update_req_method $treat_old_file

req_go_file=$code_dir/requests.go
req_go_file=$(pre_treat_old_file $treat_old_file $req_go_file)

resp_go_file=$code_dir/results.go
resp_go_file=$(pre_treat_old_file $treat_old_file $resp_go_file)

#echo $req_go_file
#echo $resp_go_file

#exit 0

req_resp_generator=$tool_dir/python_tools/convert_request_response.py

# ------------------------------------------------------------ #
#                  generatte requests.go                       #
# ------------------------------------------------------------ #

package_name=$(basename $code_dir)

# write the head
(
cat << EOF
package $package_name
EOF
) > $req_go_file

# generate Create part of requests.go
err=$(python $req_resp_generator "req_create" $req_go_file $api_doc_dir/create.docx $resource_name "$create_success_codes")
test $? -ne 0 && echo "generate requests.go of Create failed: $err" && exit 1
test ${#err} -gt 0 && echo $err

# generate Update part of requests.go
if [ -f $api_doc_dir/update.docx ]; then
    err=$(python $req_resp_generator "req_update" $req_go_file $api_doc_dir/update.docx $resource_name "$update_success_codes" $update_req_method)
    test $? -ne 0 && echo "generate requests.go of Update failed: $err" && exit 1
    test ${#err} -gt 0 && echo $err
fi

# generate Get/Delete part of requests.go
delete_req_opt="nil"
test -n "$delete_success_codes" && delete_req_opt="&${sdk_name}.RequestOpts{OkCodes: []int{${delete_success_codes}}}"
(
cat << EOF
'func_start

func Get(c *${sdk_name}.ServiceClient, id string) (r GetResult) {
    _, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
    return
}

func Delete(c *${sdk_name}.ServiceClient, id string) (r DeleteResult) {
    reqOpt := $delete_req_opt
    _, r.Err = c.Delete(resourceURL(c, id), reqOpt)
    return
}
'func_end
EOF
) >> $req_go_file

sed -i '/func_start$/d' $req_go_file
sed -i '/func_end$/d' $req_go_file

fmt_go_file $req_go_file

# ------------------------------------------------------------ #
#                  generatte results.go                        #
# ------------------------------------------------------------ #


default_result() {
    local op=$1
(
cat << EOF
'head_start
type ${op}Result struct {
    ${sdk_name}.Result
}

func (r ${op}Result) Extract() (*${resource_name}, error) {
    s := &${resource_name}{}
    return s, r.ExtractInto(s)
}
'head_end
EOF
) >> $resp_go_file 

    sed -i '/head_start$/d' $resp_go_file
    sed -i '/head_end$/d' $resp_go_file
}

# write the head
(
cat << EOF
package $package_name
EOF
) > $resp_go_file

# generate CRUD method
fs=("get.docx" "create_resp.docx" "update_resp.docx")
for f in ${fs[@]}
do
    fd=$api_doc_dir/$f
    if [ -f $fd ]; then
        python $req_resp_generator "resp" $resp_go_file $fd
        test $? -ne 0 && echo "generate results.go of $fd failed" && exit 1
        test ${#err} -gt 0 && echo $err
        default_result Get
    else
        if [ "$f" = "get.docx" ]; then
            echo -e "type $resource_name struct{\n}\n" >> $resp_go_file
            default_result Get
        elif [ "$f" = "create_resp.docx" ]; then
            default_result Create
        elif [ "$f" = "update_resp.docx" ]; then
            default_result Update
        fi
    fi
done

echo -e "type DeleteResult struct {\n${sdk_name}.ErrResult\n}\n" >> $resp_go_file

fmt_go_file $resp_go_file
